/******************************************************************************
Finite State Machine
Project: fsm.dot
Description: porket

Generated by gv_fsm ruby gem, see https://rubygems.org/gems/gv_fsm
gv_fsm version 0.3.4
Generation date: 2023-10-06 14:40:30 +0200
Generated from: fsm.dot
The finite state machine has:
  4 states
  4 transition functions
Functions and types have been generated with prefix "bmslv_"
******************************************************************************/

#ifndef FSM_H
#define FSM_H
#include <stdlib.h>

// State data object
// By default set to void; override this typedef or load the proper
// header if you need
typedef void bmslv_state_data_t;

// NOTHING SHALL BE CHANGED AFTER THIS LINE!

// List of states
typedef enum {
  BMSLV_STATE_INIT = 0,  
  BMSLV_STATE_RUN,  
  BMSLV_STATE_ERROR,  
  BMSLV_STATE_CHARGING,  
  BMSLV_NUM_STATES,
  BMSLV_NO_CHANGE
} bmslv_state_t;

// State human-readable names
extern const char *bmslv_state_names[];

// State function and state transition prototypes
typedef bmslv_state_t state_func_t(bmslv_state_data_t *data);
typedef void transition_func_t(bmslv_state_data_t *data);

// State functions

// Function to be executed in state init
// valid return states: BMSLV_STATE_RUN, BMSLV_STATE_ERROR
bmslv_state_t bmslv_do_init(bmslv_state_data_t *data);

// Function to be executed in state run
// valid return states: BMSLV_STATE_CHARGING, BMSLV_STATE_ERROR
bmslv_state_t bmslv_do_run(bmslv_state_data_t *data);

// Function to be executed in state error
// valid return states: BMSLV_NO_CHANGE
bmslv_state_t bmslv_do_error(bmslv_state_data_t *data);

// Function to be executed in state charging
// valid return states: BMSLV_STATE_RUN, BMSLV_STATE_ERROR
bmslv_state_t bmslv_do_charging(bmslv_state_data_t *data);


// List of state functions
extern state_func_t *const bmslv_state_table[BMSLV_NUM_STATES];


// Transition functions
void bmslv_init_to_run(bmslv_state_data_t *data);
void bmslv_to_error(bmslv_state_data_t *data);
void bmslv_run_to_charging(bmslv_state_data_t *data);
void bmslv_charging_to_run(bmslv_state_data_t *data);

// Table of transition functions
extern transition_func_t *const bmslv_transition_table[BMSLV_NUM_STATES][BMSLV_NUM_STATES];

// state manager
bmslv_state_t bmslv_run_state(bmslv_state_t cur_state, bmslv_state_data_t *data);

#endif
